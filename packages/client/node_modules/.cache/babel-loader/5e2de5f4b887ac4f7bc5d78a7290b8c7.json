{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useFetch, { CachePolicies } from \"use-http\";\n\nconst formatQueryParam = (query, key) => {\n  let value = query[key];\n\n  if (Array.isArray(value)) {\n    value = value.join(',');\n  } else if (typeof value === 'object') {\n    value = JSON.stringify(value);\n  }\n\n  return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n};\n\nconst formatQueryParams = rawQuery => {\n  const query = rawQuery || {};\n  const keys = Object.keys(query).filter(key => typeof query[key] !== 'undefined');\n  return keys.length ? `?${keys.map(key => formatQueryParam(query, key)).join('&')}` : '';\n};\n\nexport default formatQueryParams;\nexport const DEFAULT_PAGE_SIZE = 10;\nexport const usePaginate = (url, options = {}, fetchOptions = {}) => {\n  _s();\n\n  var _options$skip, _options$take, _options$order, _options$where, _process$env$REACT_AP;\n\n  const [skip, _setSkip] = useState((_options$skip = options.skip) !== null && _options$skip !== void 0 ? _options$skip : 0);\n  const [take, _setTake] = useState((_options$take = options.take) !== null && _options$take !== void 0 ? _options$take : DEFAULT_PAGE_SIZE);\n  const [order, setOrder] = useState((_options$order = options.order) !== null && _options$order !== void 0 ? _options$order : {});\n  const [where, setWhere] = useState((_options$where = options.where) !== null && _options$where !== void 0 ? _options$where : {});\n  const [refetch, setRefetch] = useState(0);\n  const baseUrl = (_process$env$REACT_AP = process.env.REACT_APP_API_ENDPOINT) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : \"\";\n  const defaultData = {\n    data: [],\n    skip,\n    take,\n    total: 0\n  };\n  const {\n    get,\n    data = defaultData,\n    loading,\n    abort\n  } = useFetch(baseUrl, {\n    cachePolicy: CachePolicies.NO_CACHE,\n    ...fetchOptions\n  });\n  useEffect(() => {\n    const params = { ...options,\n      skip,\n      take,\n      where,\n      order\n    };\n    get(`${url}${formatQueryParams(params)}`);\n  }, [refetch, skip, take, order, where]);\n\n  const fetch = () => setRefetch(Date.now());\n\n  const setSkip = (current = 1) => _setSkip(current);\n\n  const setTake = (current = DEFAULT_PAGE_SIZE) => _setTake(current);\n\n  return {\n    data: data.data,\n    total: data.total,\n    loading,\n    skip,\n    take,\n    setSkip,\n    setTake,\n    setOrder,\n    setWhere,\n    fetch,\n    abort\n  };\n};\n\n_s(usePaginate, \"caaDCB96QjeN2UAuNawkM6a6BGg=\", false, function () {\n  return [useFetch];\n});","map":{"version":3,"sources":["/Users/abc/Desktop/templateworkspace/packages/client/src/services/base/paginate.ts"],"names":["useEffect","useState","useFetch","CachePolicies","formatQueryParam","query","key","value","Array","isArray","join","JSON","stringify","encodeURIComponent","formatQueryParams","rawQuery","keys","Object","filter","length","map","DEFAULT_PAGE_SIZE","usePaginate","url","options","fetchOptions","skip","_setSkip","take","_setTake","order","setOrder","where","setWhere","refetch","setRefetch","baseUrl","process","env","REACT_APP_API_ENDPOINT","defaultData","data","total","get","loading","abort","cachePolicy","NO_CACHE","params","fetch","Date","now","setSkip","current","setTake"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useFetch, { CachePolicies, IncomingOptions } from \"use-http\";\n\nimport { HttpResponse } from \"./request\";\n\nimport {\n  FilterOptions,\n  FilterOrderOptions,\n  FilterResult,\n  FilterWhereOptions,\n  UseFilter,\n} from \"./filter\";\n\nexport type RequestQueryParamsType = Record<string | number, any>;\n\nconst formatQueryParam = (query: RequestQueryParamsType, key: string) => {\n  let value: any = query[key];\n  if (Array.isArray(value)) {\n    value = value.join(',');\n  } else if (typeof value === 'object') {\n    value = JSON.stringify(value);\n  }\n  return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n};\n\nconst formatQueryParams = (rawQuery?: RequestQueryParamsType): string => {\n  const query = rawQuery || {};\n  const keys = Object.keys(query).filter((key) => typeof query[key] !== 'undefined');\n  return keys.length ? `?${keys.map((key) => formatQueryParam(query, key)).join('&')}` : '';\n};\n\nexport default formatQueryParams;\n\nexport const DEFAULT_PAGE_SIZE = 10;\n\nexport type UsePaginate<T> = UseFilter<T> & {\n  total: number;\n  skip: number;\n  take: number;\n  setSkip: (skip?: number) => void;\n  setTake: (take?: number) => void;\n};\n\nexport type PagingOptions<T = any> = FilterOptions<T> & {\n  skip?: number;\n  take?: number;\n};\n\nexport type PagingResult<T> = {\n  data: FilterResult<T>;\n  skip: number;\n  take: number;\n  total: number;\n};\n\nexport type PaginateRequestFunc<\n  T,\n  A extends PagingOptions<T> = PagingOptions<T>\n> = (args: A) => Promise<HttpResponse<PagingResult<T>, any>>;\n\nexport const usePaginate = <T>(\n  url: string,\n  options: PagingOptions<T> = {},\n  fetchOptions: IncomingOptions = {}\n): UsePaginate<T> => {\n  const [skip, _setSkip] = useState(options.skip ?? 0);\n  const [take, _setTake] = useState(options.take ?? DEFAULT_PAGE_SIZE);\n  const [order, setOrder] = useState<FilterOrderOptions<T>>(\n    options.order ?? {}\n  );\n  const [where, setWhere] = useState<FilterWhereOptions<T>>(\n    options.where ?? {}\n  );\n  const [refetch, setRefetch] = useState(0);\n\n  const baseUrl = process.env.REACT_APP_API_ENDPOINT ?? \"\";\n\n  const defaultData: PagingResult<T> = {\n    data: [],\n    skip,\n    take,\n    total: 0,\n  };\n\n  const {\n    get,\n    data = defaultData,\n    loading,\n    abort,\n  } = useFetch<PagingResult<T>>(baseUrl, {\n    cachePolicy: CachePolicies.NO_CACHE,\n    ...fetchOptions,\n  });\n\n  useEffect(() => {\n    const params: PagingOptions<T> = {\n      ...options,\n      skip,\n      take,\n      where,\n      order,\n    };\n    get(`${url}${formatQueryParams(params)}`);\n  }, [refetch, skip, take, order, where]);\n\n  const fetch = () => setRefetch(Date.now());\n  const setSkip = (current = 1) => _setSkip(current);\n  const setTake = (current = DEFAULT_PAGE_SIZE) => _setTake(current);\n\n  return {\n    data: data.data,\n    total: data.total,\n    loading,\n    skip,\n    take,\n    setSkip,\n    setTake,\n    setOrder,\n    setWhere,\n    fetch,\n    abort,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}