{"ast":null,"code":"import { message } from 'antd';\nimport { errorMessages, interceptRequest } from './interceptors';\nimport { Api } from './request';\n\nconst interceptResponse = async ({\n  response\n}) => {\n  const {\n    ok,\n    error,\n    statusText\n  } = response;\n\n  if (!ok) {\n    var _ref, _message;\n\n    const errMsg = (_ref = (_message = error === null || error === void 0 ? void 0 : error.message) !== null && _message !== void 0 ? _message : // (error as any)?.error ??\n    errorMessages[response.status]) !== null && _ref !== void 0 ? _ref : statusText;\n    message.error(errMsg);\n  }\n\n  return response;\n};\n\nconst client = new Api({\n  baseUrl: process.env.REACT_APP_API_ENDPOINT || '',\n  interceptors: {\n    request: interceptRequest,\n    response: interceptResponse\n  }\n});\nexport default client;","map":{"version":3,"sources":["/Users/abc/Desktop/templateworkspace/packages/client/src/services/base/client.ts"],"names":["message","errorMessages","interceptRequest","Api","interceptResponse","response","ok","error","statusText","errMsg","status","client","baseUrl","process","env","REACT_APP_API_ENDPOINT","interceptors","request"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AAGA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,gBAAhD;AAEA,SAASC,GAAT,QAAkC,WAAlC;;AAEA,MAAMC,iBAAiB,GAAG,OAAa;AAAEC,EAAAA;AAAF,CAAb,KAAgE;AACxF,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA;AAAb,MAA4BH,QAAlC;;AACA,MAAI,CAACC,EAAL,EAAS;AAAA;;AACP,UAAMG,MAAM,uBACTF,KADS,aACTA,KADS,uBACTA,KAAD,CAAgBP,OADN,+CAEV;AACAC,IAAAA,aAAa,CAACI,QAAQ,CAACK,MAAV,CAHH,uCAIVF,UAJF;AAKAR,IAAAA,OAAO,CAACO,KAAR,CAAcE,MAAd;AACD;;AAID,SAAOJ,QAAP;AACD,CAdD;;AAgBA,MAAMM,MAAM,GAAG,IAAIR,GAAJ,CAAQ;AACrBS,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,IAAsC,EAD1B;AAErBC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,OAAO,EAAEf,gBAAX;AAA6BG,IAAAA,QAAQ,EAAED;AAAvC;AAFO,CAAR,CAAf;AAKA,eAAeO,MAAf","sourcesContent":["import { message } from 'antd';\n\n\nimport { errorMessages, interceptRequest } from './interceptors';\n\nimport { Api, HttpResponse } from './request';\n\nconst interceptResponse = async <T, E>({ response }: { response: HttpResponse<T, E> }) => {\n  const { ok, error, statusText } = response;\n  if (!ok) {\n    const errMsg =\n      (error as any)?.message ??\n      // (error as any)?.error ??\n      errorMessages[response.status] ??\n      statusText;\n    message.error(errMsg);\n  }\n\n\n\n  return response;\n};\n\nconst client = new Api({\n  baseUrl: process.env.REACT_APP_API_ENDPOINT || '',\n  interceptors: { request: interceptRequest, response: interceptResponse },\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}