{"ast":null,"code":"import { message } from \"antd\";\nexport const interceptRequest = ({\n  options = {}\n}) => {\n  var _options$headers;\n\n  return { ...options,\n    headers: { ...((_options$headers = options.headers) !== null && _options$headers !== void 0 ? _options$headers : {})\n    }\n  };\n};\nexport const errorMessages = {\n  401: \"Please relogin to perform this action\"\n};\nexport const interceptResponse = async ({\n  response\n}) => {\n  var _response$headers$get;\n\n  let result;\n\n  if ((_response$headers$get = response.headers.get(\"content-type\")) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes(\"application/json\")) {\n    result = await response.json();\n  }\n\n  if (response.ok) {\n    response.data = result;\n  } else {\n    var _ref, _ref2, _result$error, _result, _result2, _result$message, _result3;\n\n    const errMsg = (_ref = (_ref2 = (_result$error = (_result = result) === null || _result === void 0 ? void 0 : _result.error) !== null && _result$error !== void 0 ? _result$error : (_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.message) !== null && _ref2 !== void 0 ? _ref2 : errorMessages[response.status]) !== null && _ref !== void 0 ? _ref : response.statusText;\n    const error = new Error(errMsg);\n    response.error = error;\n    message.error((_result$message = (_result3 = result) === null || _result3 === void 0 ? void 0 : _result3.message) !== null && _result$message !== void 0 ? _result$message : response.statusText);\n  }\n\n  return response;\n};","map":{"version":3,"sources":["/Users/abc/Desktop/templateworkspace/packages/client/src/services/base/interceptors.ts"],"names":["message","interceptRequest","options","headers","errorMessages","interceptResponse","response","result","get","includes","json","ok","data","errMsg","error","status","statusText","Error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AAOA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAC/BC,EAAAA,OAAO,GAAG;AADqB,CAAD,KAIb;AAAA;;AACjB,SAAO,EACL,GAAGA,OADE;AAELC,IAAAA,OAAO,EAAE,EACP,wBAAID,OAAO,CAACC,OAAZ,+DAAuB,EAAvB;AADO;AAFJ,GAAP;AAMD,CAXM;AAaP,OAAO,MAAMC,aAAqC,GAAG;AACnD,OAAK;AAD8C,CAA9C;AAIP,OAAO,MAAMC,iBAAiB,GAAG,OAAgB;AAC/CC,EAAAA;AAD+C,CAAhB,KAI3B;AAAA;;AACJ,MAAIC,MAAJ;;AACA,+BAAID,QAAQ,CAACH,OAAT,CAAiBK,GAAjB,CAAqB,cAArB,CAAJ,0DAAI,sBAAsCC,QAAtC,CAA+C,kBAA/C,CAAJ,EAAwE;AACtEF,IAAAA,MAAM,GAAG,MAAMD,QAAQ,CAACI,IAAT,EAAf;AACD;;AAED,MAAIJ,QAAQ,CAACK,EAAb,EAAiB;AACfL,IAAAA,QAAQ,CAACM,IAAT,GAAgBL,MAAhB;AACD,GAFD,MAEO;AAAA;;AACL,UAAMM,MAAM,gDACVN,MADU,4CACV,QAAQO,KADE,qEAEVP,MAFU,6CAEV,SAAQP,OAFE,yCAGVI,aAAa,CAACE,QAAQ,CAACS,MAAV,CAHH,uCAIVT,QAAQ,CAACU,UAJX;AAKA,UAAMF,KAAK,GAAG,IAAIG,KAAJ,CAAUJ,MAAV,CAAd;AACAP,IAAAA,QAAQ,CAACQ,KAAT,GAAiBA,KAAjB;AAEAd,IAAAA,OAAO,CAACc,KAAR,gCAAcP,MAAd,6CAAc,SAAQP,OAAtB,6DAAiCM,QAAQ,CAACU,UAA1C;AACD;;AAED,SAAOV,QAAP;AACD,CAzBM","sourcesContent":["import { message } from \"antd\";\nimport { Res as HttpRes } from \"use-http\";\n\nexport type Res<T> = HttpRes<T> & {\n  error?: Error;\n};\n\nexport const interceptRequest = ({\n  options = {},\n}: {\n  options: RequestInit;\n}): RequestInit => {\n  return {\n    ...options,\n    headers: {\n      ...(options.headers ?? {}),\n    },\n  };\n};\n\nexport const errorMessages: Record<number, string> = {\n  401: \"Please relogin to perform this action\",\n};\n\nexport const interceptResponse = async <T = any>({\n  response,\n}: {\n  response: Res<T>;\n}) => {\n  let result;\n  if (response.headers.get(\"content-type\")?.includes(\"application/json\")) {\n    result = await response.json();\n  }\n\n  if (response.ok) {\n    response.data = result;\n  } else {\n    const errMsg =\n      result?.error ??\n      result?.message ??\n      errorMessages[response.status] ??\n      response.statusText;\n    const error = new Error(errMsg);\n    response.error = error;\n\n    message.error(result?.message ?? response.statusText);\n  }\n\n  return response;\n};\n"]},"metadata":{},"sourceType":"module"}