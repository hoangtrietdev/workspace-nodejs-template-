{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport const usePaginate = url => {\n  _s();\n\n  const [resData, setResData] = useState([]);\n  const [orderMap, setOrder] = useState({});\n  useEffect(() => {\n    const columns = [];\n    const order = Object.keys(orderMap).reduce((all, key) => {\n      const idx = columns.findIndex(data => data === key);\n\n      if (idx > -1) {\n        const dir = orderMap[key] === 'ascend' ? 'asc' : 'desc';\n        all.push({\n          column: idx,\n          dir\n        });\n      }\n\n      return all;\n    }, []);\n    fetch(url).then(res => res.json()).then(dataR => setResData(dataR));\n  }, []);\n  const info = JSON.stringify(resData);\n  const jsonObject = JSON.parse(info);\n\n  jsonObject.fetch = () => {\n    Date.now();\n  };\n\n  jsonObject.changePage = pageData => {\n    if (!!pageData.current) {\n      const page = pageData.current - 1;\n      fetch(`${url}?filter=%26page=${page}%26pageSize=${pageData.pageSize}%26${param}`).then(res => res.json()).then(dataR => setResData(dataR));\n    }\n  };\n\n  jsonObject.setOrder = order => setOrder(order);\n\n  return jsonObject;\n};\n\n_s(usePaginate, \"jfj5nIgqOX4VuJJnyRhjrwJmf0g=\");","map":{"version":3,"sources":["/Users/abc/Desktop/templateworkspace/packages/client/src/services/base/paginate.ts"],"names":["useEffect","useState","usePaginate","url","resData","setResData","orderMap","setOrder","columns","order","Object","keys","reduce","all","key","idx","findIndex","data","dir","push","column","fetch","then","res","json","dataR","info","JSON","stringify","jsonObject","parse","Date","now","changePage","pageData","current","page","pageSize","param"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAsBA,OAAO,MAAMC,WAAW,GACtBC,GADyB,IAEP;AAAA;;AAClB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACK,QAAD,EAAWC,QAAX,IAAuBN,QAAQ,CAAoB,EAApB,CAArC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,OAAW,GAAG,EAApB;AACA,UAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,MAAtB,CAA4C,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtE,YAAMC,GAAG,GAAGP,OAAO,CAACQ,SAAR,CAAoBC,IAAF,IAAiBA,IAAI,KAAKH,GAA5C,CAAZ;;AACA,UAAIC,GAAG,GAAG,CAAC,CAAX,EAAc;AACZ,cAAMG,GAAG,GAAGZ,QAAQ,CAACQ,GAAD,CAAR,KAAkB,QAAlB,GAA6B,KAA7B,GAAqC,MAAjD;AACAD,QAAAA,GAAG,CAACM,IAAJ,CAAS;AAAEC,UAAAA,MAAM,EAAEL,GAAV;AAAeG,UAAAA;AAAf,SAAT;AACD;;AACD,aAAOL,GAAP;AACD,KAPa,EAOX,EAPW,CAAd;AASAQ,IAAAA,KAAK,CAAClB,GAAD,CAAL,CACGmB,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,KAAD,IAAWpB,UAAU,CAACoB,KAAD,CAF7B;AAGD,GAdQ,EAcN,EAdM,CAAT;AAgBA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAexB,OAAf,CAAb;AACA,QAAMyB,UAAwB,GAAGF,IAAI,CAACG,KAAL,CAAWJ,IAAX,CAAjC;;AACAG,EAAAA,UAAU,CAACR,KAAX,GAAmB,MAAM;AAACU,IAAAA,IAAI,CAACC,GAAL;AAAW,GAArC;;AACAH,EAAAA,UAAU,CAACI,UAAX,GAAyBC,QAAD,IAAc;AACpC,QAAG,CAAC,CAACA,QAAQ,CAACC,OAAd,EAAuB;AACrB,YAAMC,IAAW,GAAGF,QAAQ,CAACC,OAAT,GAAmB,CAAvC;AACAd,MAAAA,KAAK,CAAE,GAAElB,GAAI,mBAAkBiC,IAAK,eAAcF,QAAQ,CAACG,QAAS,MAAKC,KAAM,EAA1E,CAAL,CACGhB,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,KAAD,IAAWpB,UAAU,CAACoB,KAAD,CAF7B;AAGD;AACF,GAPD;;AAQAI,EAAAA,UAAU,CAACtB,QAAX,GAAuBE,KAAD,IAA8BF,QAAQ,CAACE,KAAD,CAA5D;;AAEA,SAAOoB,UAAP;AAED,CArCM;;GAAM3B,W","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport type PagingList<T> = {\n  data: never[] | T[];\n  total: number;\n  pages: boolean;\n  page: number;\n  pageSize: number;\n  fetch: () => void;\n  changePage: (pageData: {current:number | undefined, pageSize:number | undefined}) => void;\n  setOrder: (order: PagingOrderOption) => void;\n};\n\nexport type PagingOrder = {\n  column: number;\n  dir: 'asc' | 'desc';\n};\n\nexport type PagingOrderOption = {\n  [k: string]: 'ascend' | 'descend';\n};\n\nexport const usePaginate = <T>(\n  url: string,\n): PagingList<T> => {\n  const [resData, setResData] = useState([]);\n  const [orderMap, setOrder] = useState<PagingOrderOption>({});\n\n  useEffect(() => {\n    const columns:any = [];\n    const order = Object.keys(orderMap).reduce<PagingOrder[]>((all, key) => {\n      const idx = columns.findIndex(( data: any ) => data === key);\n      if (idx > -1) {\n        const dir = orderMap[key] === 'ascend' ? 'asc' : 'desc';\n        all.push({ column: idx, dir });\n      }\n      return all;\n    }, []);\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((dataR) => setResData(dataR));\n  }, []);\n\n  const info = JSON.stringify(resData);\n  const jsonObject:PagingList<T> = JSON.parse(info)\n  jsonObject.fetch = () => {Date.now()}\n  jsonObject.changePage = (pageData) => {\n    if(!!pageData.current) {\n      const page:number = pageData.current - 1\n      fetch(`${url}?filter=%26page=${page}%26pageSize=${pageData.pageSize}%26${param}`)\n        .then((res) => res.json())\n        .then((dataR) => setResData(dataR));\n    }\n  }\n  jsonObject.setOrder = (order: PagingOrderOption) => setOrder(order)\n\n  return jsonObject\n  \n};\n"]},"metadata":{},"sourceType":"module"}