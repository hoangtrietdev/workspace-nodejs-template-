{"ast":null,"code":"import { interceptResponse } from './interceptors';\n\nconst _fetch = async (url, options = {}) => {\n  return fetch(url).then(response => interceptResponse({\n    response\n  }), err => {\n    throw err;\n  });\n};\n\nexport const get = async (url, options = {}) => _fetch(url, { ...options,\n  method: 'GET'\n});\nexport const post = async (url, body = null, options = {}) => {\n  var _options$headers;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    ...((_options$headers = options.headers) !== null && _options$headers !== void 0 ? _options$headers : {})\n  };\n  return _fetch(url, { ...options,\n    headers,\n    method: 'POST',\n    body\n  });\n};\nexport const put = async (url, body = null, options = {}) => {\n  var _options$headers2;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    ...((_options$headers2 = options.headers) !== null && _options$headers2 !== void 0 ? _options$headers2 : {})\n  };\n  return _fetch(url, { ...options,\n    headers,\n    method: 'PUT',\n    body\n  });\n};\nexport const deleted = async (url, body = null, options = {}) => {\n  var _options$headers3;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    ...((_options$headers3 = options.headers) !== null && _options$headers3 !== void 0 ? _options$headers3 : {})\n  };\n  return _fetch(url, { ...options,\n    headers,\n    method: 'DELETE',\n    body\n  });\n};\nexport default _fetch;","map":{"version":3,"sources":["/Users/abc/Desktop/templateworkspace/packages/client/src/services/base/fetch.ts"],"names":["interceptResponse","_fetch","url","options","fetch","then","response","err","get","method","post","body","headers","put","deleted"],"mappings":"AAAA,SAASA,iBAAT,QAAuC,gBAAvC;;AAEA,MAAMC,MAAM,GAAG,OAAUC,GAAV,EAAuBC,OAAoB,GAAG,EAA9C,KAAwE;AACrF,SAAOC,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CACJC,QAAD,IAAcN,iBAAiB,CAAI;AAAEM,IAAAA;AAAF,GAAJ,CAD1B,EAEJC,GAAD,IAAS;AACP,UAAMA,GAAN;AACD,GAJI,CAAP;AAMD,CAPD;;AASA,OAAO,MAAMC,GAAG,GAAG,OAAUN,GAAV,EAAuBC,OAAoB,GAAG,EAA9C,KACjBF,MAAM,CAAIC,GAAJ,EAAS,EAAE,GAAGC,OAAL;AAAcM,EAAAA,MAAM,EAAE;AAAtB,CAAT,CADD;AAGP,OAAO,MAAMC,IAAI,GAAG,OAClBR,GADkB,EAElBS,IAAyB,GAAG,IAFV,EAGlBR,OAAoB,GAAG,EAHL,KAIE;AAAA;;AACpB,QAAMS,OAAO,GAAG;AACd,oBAAgB,kBADF;AAEd,4BAAIT,OAAO,CAACS,OAAZ,+DAAuB,EAAvB;AAFc,GAAhB;AAKA,SAAOX,MAAM,CAACC,GAAD,EAAM,EACjB,GAAGC,OADc;AAEjBS,IAAAA,OAFiB;AAGjBH,IAAAA,MAAM,EAAE,MAHS;AAIjBE,IAAAA;AAJiB,GAAN,CAAb;AAMD,CAhBM;AAkBP,OAAO,MAAME,GAAG,GAAG,OACjBX,GADiB,EAEjBS,IAAyB,GAAG,IAFX,EAGjBR,OAAoB,GAAG,EAHN,KAIG;AAAA;;AACpB,QAAMS,OAAO,GAAG;AACd,oBAAgB,kBADF;AAEd,6BAAIT,OAAO,CAACS,OAAZ,iEAAuB,EAAvB;AAFc,GAAhB;AAKA,SAAOX,MAAM,CAACC,GAAD,EAAM,EACjB,GAAGC,OADc;AAEjBS,IAAAA,OAFiB;AAGjBH,IAAAA,MAAM,EAAE,KAHS;AAIjBE,IAAAA;AAJiB,GAAN,CAAb;AAMD,CAhBM;AAkBP,OAAO,MAAMG,OAAO,GAAG,OACrBZ,GADqB,EAErBS,IAAyB,GAAG,IAFP,EAGrBR,OAAoB,GAAG,EAHF,KAID;AAAA;;AACpB,QAAMS,OAAO,GAAG;AACd,oBAAgB,kBADF;AAEd,6BAAIT,OAAO,CAACS,OAAZ,iEAAuB,EAAvB;AAFc,GAAhB;AAKA,SAAOX,MAAM,CAACC,GAAD,EAAM,EACjB,GAAGC,OADc;AAEjBS,IAAAA,OAFiB;AAGjBH,IAAAA,MAAM,EAAE,QAHS;AAIjBE,IAAAA;AAJiB,GAAN,CAAb;AAMD,CAhBM;AAkBP,eAAeV,MAAf","sourcesContent":["import { interceptResponse, Res } from './interceptors';\n\nconst _fetch = async <T>(url: string, options: RequestInit = {}): Promise<Response> => {\n  return fetch(url).then(\n    (response) => interceptResponse<T>({ response }),\n    (err) => {\n      throw err;\n    },\n  );\n};\n\nexport const get = async <T>(url: string, options: RequestInit = {}): Promise<Res<T>> =>\n  _fetch<T>(url, { ...options, method: 'GET' });\n\nexport const post = async <T>(\n  url: string,\n  body: RequestInit['body'] = null,\n  options: RequestInit = {},\n): Promise<Res<T>> => {\n  const headers = {\n    'Content-Type': 'application/json',\n    ...(options.headers ?? {}),\n  };\n\n  return _fetch(url, {\n    ...options,\n    headers,\n    method: 'POST',\n    body,\n  });\n};\n\nexport const put = async <T>(\n  url: string,\n  body: RequestInit['body'] = null,\n  options: RequestInit = {},\n): Promise<Res<T>> => {\n  const headers = {\n    'Content-Type': 'application/json',\n    ...(options.headers ?? {}),\n  };\n\n  return _fetch(url, {\n    ...options,\n    headers,\n    method: 'PUT',\n    body,\n  });\n};\n\nexport const deleted = async <T>(\n  url: string,\n  body: RequestInit['body'] = null,\n  options: RequestInit = {},\n): Promise<Res<T>> => {\n  const headers = {\n    'Content-Type': 'application/json',\n    ...(options.headers ?? {}),\n  };\n\n  return _fetch(url, {\n    ...options,\n    headers,\n    method: 'DELETE',\n    body,\n  });\n};\n\nexport default _fetch;\n"]},"metadata":{},"sourceType":"module"}