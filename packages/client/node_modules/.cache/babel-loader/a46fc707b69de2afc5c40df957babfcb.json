{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useFetch, { CachePolicies } from \"use-http\";\nexport let OrderDirection;\n\n(function (OrderDirection) {\n  OrderDirection[\"ASC\"] = \"ASC\";\n  OrderDirection[\"DESC\"] = \"DESC\";\n})(OrderDirection || (OrderDirection = {}));\n\nconst formatQueryParam = (query, key) => {\n  let value = query[key];\n\n  if (Array.isArray(value)) {\n    value = value.join(\",\");\n  } else if (typeof value === \"object\") {\n    value = JSON.stringify(value);\n  }\n\n  return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n};\n\nconst formatQueryParams = rawQuery => {\n  const query = rawQuery || {};\n  const keys = Object.keys(query).filter(key => typeof query[key] !== \"undefined\");\n  return keys.length ? `?${keys.map(key => formatQueryParam(query, key)).join(\"&\")}` : \"\";\n};\n\nexport default formatQueryParams;\nexport const useFilter = (url, options = {}, fetchOptions = {}) => {\n  _s();\n\n  const [order, setOrder] = useState({});\n  const [where, setWhere] = useState({});\n  const [refetch, setRefetch] = useState(0);\n  const defaultData = [];\n  const {\n    get,\n    data = defaultData,\n    error,\n    loading,\n    abort\n  } = useFetch({\n    cachePolicy: CachePolicies.NO_CACHE,\n    ...fetchOptions\n  });\n  useEffect(() => {\n    const params = { ...options,\n      order,\n      where\n    };\n    get(`${url}${formatQueryParams(params)}`);\n  }, [refetch, order, where]);\n\n  const fetch = () => setRefetch(Date.now());\n\n  return {\n    data,\n    error,\n    loading,\n    setOrder,\n    setWhere,\n    fetch,\n    abort\n  };\n};\n\n_s(useFilter, \"bjYf0LzbkUVMl/RzpHedEmHIF2I=\", false, function () {\n  return [useFetch];\n});","map":{"version":3,"sources":["/Users/abc/Desktop/templateworkspace/packages/client/src/services/base/filter.ts"],"names":["useEffect","useState","useFetch","CachePolicies","OrderDirection","formatQueryParam","query","key","value","Array","isArray","join","JSON","stringify","encodeURIComponent","formatQueryParams","rawQuery","keys","Object","filter","length","map","useFilter","url","options","fetchOptions","order","setOrder","where","setWhere","refetch","setRefetch","defaultData","get","data","error","loading","abort","cachePolicy","NO_CACHE","params","fetch","Date","now"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,IAAmBC,aAAnB,QAAyD,UAAzD;AAEA,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAOZ,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAgCC,GAAhC,KAAgD;AACvE,MAAIC,KAAU,GAAGF,KAAK,CAACC,GAAD,CAAtB;;AACA,MAAIE,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBA,IAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,GAAX,CAAR;AACD,GAFD,MAEO,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AACpCA,IAAAA,KAAK,GAAGI,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAR;AACD;;AACD,SAAQ,GAAEM,kBAAkB,CAACP,GAAD,CAAM,IAAGO,kBAAkB,CAACN,KAAD,CAAQ,EAA/D;AACD,CARD;;AAUA,MAAMO,iBAAiB,GAAIC,QAAD,IAA+C;AACvE,QAAMV,KAAK,GAAGU,QAAQ,IAAI,EAA1B;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYX,KAAZ,EAAmBa,MAAnB,CACVZ,GAAD,IAAS,OAAOD,KAAK,CAACC,GAAD,CAAZ,KAAsB,WADpB,CAAb;AAGA,SAAOU,IAAI,CAACG,MAAL,GACF,IAAGH,IAAI,CAACI,GAAL,CAAUd,GAAD,IAASF,gBAAgB,CAACC,KAAD,EAAQC,GAAR,CAAlC,EAAgDI,IAAhD,CAAqD,GAArD,CAA0D,EAD3D,GAEH,EAFJ;AAGD,CARD;;AAUA,eAAeI,iBAAf;AAiDA,OAAO,MAAMO,SAAS,GAAG,CACvBC,GADuB,EAEvBC,OAAyB,GAAG,EAFL,EAGvBC,YAA6B,GAAG,EAHT,KAIN;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAwB,EAAxB,CAAlC;AACA,QAAM,CAAC2B,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAAwB,EAAxB,CAAlC;AACA,QAAM,CAAC6B,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,CAAD,CAAtC;AAEA,QAAM+B,WAA4B,GAAG,EAArC;AAEA,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,IAAI,GAAGF,WAFH;AAGJG,IAAAA,KAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA;AALI,MAMFnC,QAAQ,CAAkB;AAC5BoC,IAAAA,WAAW,EAAEnC,aAAa,CAACoC,QADC;AAE5B,OAAGd;AAFyB,GAAlB,CANZ;AAWAzB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwC,MAAwB,GAAG,EAC/B,GAAGhB,OAD4B;AAE/BE,MAAAA,KAF+B;AAG/BE,MAAAA;AAH+B,KAAjC;AAMAK,IAAAA,GAAG,CAAE,GAAEV,GAAI,GAAER,iBAAiB,CAACyB,MAAD,CAAS,EAApC,CAAH;AACD,GARQ,EAQN,CAACV,OAAD,EAAUJ,KAAV,EAAiBE,KAAjB,CARM,CAAT;;AAUA,QAAMa,KAAK,GAAG,MAAMV,UAAU,CAACW,IAAI,CAACC,GAAL,EAAD,CAA9B;;AAEA,SAAO;AACLT,IAAAA,IADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA,OAHK;AAILT,IAAAA,QAJK;AAKLE,IAAAA,QALK;AAMLY,IAAAA,KANK;AAOLJ,IAAAA;AAPK,GAAP;AASD,CA3CM;;GAAMf,S;UAiBPpB,Q","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useFetch, { CachePolicies, IncomingOptions } from \"use-http\";\n\nexport enum OrderDirection {\n  ASC = \"ASC\",\n  DESC = \"DESC\",\n}\n\nexport type RequestQueryParamsType = Record<string | number, any>;\n\nconst formatQueryParam = (query: RequestQueryParamsType, key: string) => {\n  let value: any = query[key];\n  if (Array.isArray(value)) {\n    value = value.join(\",\");\n  } else if (typeof value === \"object\") {\n    value = JSON.stringify(value);\n  }\n  return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n};\n\nconst formatQueryParams = (rawQuery?: RequestQueryParamsType): string => {\n  const query = rawQuery || {};\n  const keys = Object.keys(query).filter(\n    (key) => typeof query[key] !== \"undefined\"\n  );\n  return keys.length\n    ? `?${keys.map((key) => formatQueryParam(query, key)).join(\"&\")}`\n    : \"\";\n};\n\nexport default formatQueryParams;\n\nexport type FilterOrderOptions<T = any> = {\n  [field in Extract<keyof T, string>]?: OrderDirection;\n};\n\nexport type FilterStandardOperators<T> = {\n  in?: T[];\n  nin?: T[];\n};\n\nexport type FilterRangeOperators<T> = {\n  gt?: T;\n  gte?: T;\n  lt?: T;\n  lte?: T;\n};\n\ntype OperatorMap = {\n  string: FilterStandardOperators<string>;\n  number: FilterStandardOperators<number> & FilterRangeOperators<number>;\n};\n\nexport type FilterWhereOptions<T> = {\n  [k in keyof T]?: T[k] extends string\n    ? OperatorMap[\"string\"] | string\n    : T[k] extends number\n    ? OperatorMap[\"number\"] | number\n    : T[k];\n};\n\nexport type UseFilter<T> = {\n  data: T[];\n  error?: Error;\n  loading: boolean;\n  fetch: () => void;\n  abort: () => void;\n  setOrder: (order: FilterOrderOptions<T>) => void;\n  setWhere: (where: FilterWhereOptions<T>) => void;\n};\n\nexport type FilterOptions<T = any> = {\n  select?: any[] | undefined;\n  where?: FilterWhereOptions<T>;\n  order?: FilterOrderOptions<T>;\n};\n\nexport type FilterResult<T> = Array<T>;\n\nexport const useFilter = <T>(\n  url: string,\n  options: FilterOptions<T> = {},\n  fetchOptions: IncomingOptions = {}\n): UseFilter<T> => {\n  const [order, setOrder] = useState<FilterOrderOptions<T>>({});\n  const [where, setWhere] = useState<FilterWhereOptions<T>>({});\n  const [refetch, setRefetch] = useState(0);\n\n  const defaultData: FilterResult<T> = [];\n\n  const {\n    get,\n    data = defaultData,\n    error,\n    loading,\n    abort,\n  } = useFetch<FilterResult<T>>({\n    cachePolicy: CachePolicies.NO_CACHE,\n    ...fetchOptions,\n  });\n\n  useEffect(() => {\n    const params: FilterOptions<T> = {\n      ...options,\n      order,\n      where,\n    };\n\n    get(`${url}${formatQueryParams(params)}`);\n  }, [refetch, order, where]);\n\n  const fetch = () => setRefetch(Date.now());\n\n  return {\n    data,\n    error,\n    loading,\n    setOrder,\n    setWhere,\n    fetch,\n    abort,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}